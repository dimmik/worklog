@page "/notebooks"
@using WorklogDomain
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (notebooks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Created</th>
                <th>Cont recs</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var notebook in notebooks)
            {
                <tr>
                    <td>@notebook.Name</td>
                    <td>@notebook.Created.ToString("dd.MM.yyyy HH:mm:ss")</td>
                    <td>@(notebook.Records?.Count() ?? 0)

                    <button @onclick="() => RemoveNotebook(notebook.Id)">Remove</button>
                    </td>


                 </tr>
            }
            <tr>
                <td colspan="3">

                    <EditForm Model="@newNotebook" OnValidSubmit="@AddNotebook">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <InputText id="name" @bind-Value="newNotebook.Name" />

                        <button type="submit">Submit</button>
                    </EditForm>

                </td>
            </tr>
        </tbody>
    </table>
}

@code {
    private Notebook[] notebooks;
    private Notebook newNotebook = new();

    protected override async Task OnInitializedAsync()
    {
        await ReloadNotebooks();
    }
    protected async Task ReloadNotebooks()
    {
        notebooks = await Http.GetFromJsonAsync<Notebook[]>("api/notebook");
    }
    protected async Task AddNotebook()
    {
        await Http.PostAsJsonAsync<Notebook>("api/notebook", newNotebook);
        newNotebook = new();
        await ReloadNotebooks();
    }
    protected async Task RemoveNotebook(string id)
    {
        await Http.DeleteAsync($"api/notebook/{id}");
        await ReloadNotebooks();
    }
}
