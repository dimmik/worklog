@page "/notebooks/{nbId}"
@using WorklogDomain
@inject HttpClient Http
@inject AppState AppState
@inject IJSRuntime jr

@if (notebook == null && !NbNotFound)
{
  <p>Loading Notebook...</p>
} else if (NbNotFound)
{
    <p>Notebook with ID <pre>@NbId</pre> not found </p>
} else
{

<table width="100%" border="1">
    <tr>
        <td colspan="2">
            @notebook.Name [@notebook.Created.ToString("yyyy-MM-dd HH:mm:ss")]
            Show <input type="text" size="3" value="@NumLastRecords" @onchange="@((ChangeEventArgs __e) => ChangedNumLastRecords(__e.Value.ToString()))" /> last records
        </td>
    </tr>
    @foreach (var r in ((notebook.Records ?? new List<Record>()).TakeLast(NumLastRecords)))
    {
        <tr>
            <td style="width: 5%" valign="top"><span style="font-size: xx-small"><nobr>@r.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</nobr></span></td>
            <td style="width: 95%;">
                    @((MarkupString)r.Content.Replace("<", "&lt;").Replace("\r\n", "\n").Replace("\n", "<br/>"))
            </td>
        </tr>
    }
<tr>
    <td colspan="2">
            <textarea id="NewRecordContent" style="width: 100%"
                      @bind="NewRecordContent"
                      @bind:event="oninput"
                      @onkeydown="(KeyboardEventArgs e) => AddRecordByEnter(e)"
                      @ref="NewRecordContentElem" />
            <button @onclick="AddRecord">Add</button>
    </td>
</tr>
</table>
}

@code {
    [Parameter]
    public string NbId { get; set; }
    protected Notebook notebook { get; set; }
    protected bool NbNotFound = false;
    protected int NumLastRecords { get; set; }


    protected string NewRecordContent = "";
    private ElementReference NewRecordContentElem;

    protected override async Task OnInitializedAsync()
    {
        await ReloadNotebook();
        NumLastRecords = await AppState.Retrieve<int>(nameof(NumLastRecords));
        if (NumLastRecords == 0) NumLastRecords = 100;
    }
    protected async Task ReloadNotebook()
    {
        try
        {
            notebook = await Http.GetFromJsonAsync<Notebook>($"api/notebook/{NbId}");
        }
        catch
        {
            NbNotFound = true;
        }
    }
    protected async Task ChangedNumLastRecords(string numS)
    {
        if (int.TryParse(numS, out int num))
        {
            NumLastRecords = num;
            await AppState.Store(nameof(NumLastRecords), NumLastRecords);
        }
    }
    protected async Task AddRecordByEnter(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && !(e.AltKey || e.ShiftKey || e.CtrlKey))
        {
            await AddRecord();
        }
    }
    protected async Task AddRecord()
    {
        var rec = new Record();
        rec.Content = NewRecordContent;
        await Http.PostAsJsonAsync($"api/notebook/{NbId}/record", rec);
        NewRecordContent = "";
        await ReloadNotebook();
        await NewRecordContentElem.FocusAsync();
    }
    protected async Task RemoveRecord(string recId)
    {
        await Http.DeleteAsync($"api/notebook/{NbId}/record/{recId}");
        await ReloadNotebook();
    }
}
