@page "/notebooks/{nbId}"
@using WorklogDomain
@using Algorithms.Encryption
@using WorklogWebAssembly.Client.Data
@using System.Text.Json
@using System.Threading 
@inject HttpClient Http
@inject AppState AppState
@inject ISymmetricEncryptor enc
@inject IJSRuntime JsRuntime

@if (notebook == null && !NbNotFound)
{
    <p>Loading Notebook...</p>
}
else if (NbNotFound)
{
    <p>Notebook with ID <pre>@NbId</pre> not found </p>
}
else
{

    <table width="100%" border="1">
        <tr>
            <td colspan="2">
                <b>@notebook.Name</b> <span style="font-size:xx-small">[@notebook.Created.ToString("yyyy-MM-dd HH:mm:ss")]</span>

                <MatButton class="button small-btn" @onclick="async () => {
                                                             await ReloadNotebook();
                                                             ShowTextRefreshed = true;
                                                             var timer = new Timer((_) =>
                                                                {
                                                                    InvokeAsync(() =>
                                                                    {
                                                                        ShowTextRefreshed = false;
                                                                        StateHasChanged();
                                                                    });
                                                                }, null, 500, System.Threading.Timeout.Infinite);
                                                         }">Refresh</MatButton> <span style="@(ShowTextRefreshed ? "" : "visibility:hidden")">refreshed</span>

                <br />

                <span style="font-size:x-small">
                    Show <input type="text" size="3" value="@NumLastRecords" @onchange="@((ChangeEventArgs __e) => ChangedNumLastRecords(__e.Value.ToString()))" />
                    last records out of @((notebook.Records ?? new List<Record>()).Count())
                    |
                    completed: <input type="checkbox" checked="@ShowCompleted" @onclick="() => ShowCompleted = !ShowCompleted" />
                    |
                    @if (TagsToFilter.Any())
                    {
                        <span>
                            @foreach (var t in TagsToFilter.OrderBy(t => t))
                            {
                                <span><i style="cursor:pointer" @onclick="() => TagsToFilter.Remove(t)"><u>@t</u></i>, </span>
                            }
                            <input type="checkbox" @bind="TagFilterAny" /> any
                            | <span @key="@("cpttop")"
                                style="cursor: pointer; @(TagsCopiedFrom == "TopOfTable" ? "border: 1px solid; background-color: lightblue;" : "")"
                                    @onclick='() =>
                                          {
                                              Tags = string.Join(", ", (TagsToFilter ?? new List<string>()));
                                              TagsCopiedFrom = "TopOfTable";
                                          }'>----</span>
                        </span>
                    }


                    <select @bind="TagSelectedValue">
                        <option value="" selected="selected">choose tag...</option>
                        @foreach (var t in RecordsToShow(notebook)
                           .SelectMany(r => (r.Metadata?.Tags ?? new List<string>()))
                           .Select(t => t.Trim())
                           .Distinct())
                        {
                            <option value="@t">@t</option>
                        }
                    </select>


                </span>
            </td>
        </tr>
        @foreach (var r in
                   RecordsToShow(notebook)
                   .Where(r => MatchTags(r))
                   .OrderBy(r => r.Timestamp)
                   .TakeLast(NumLastRecords)
                       )
        {
            var rId = r.Id;

            if (!dOpts.ContainsKey(rId)) dOpts[rId] = userSettings.DefaultShowEncryptedOptions.Clone();
            if (!recs.ContainsKey(rId)) recs[rId] = r;
            if (!collapsed.ContainsKey(rId)) collapsed[rId] = userSettings.Collapse.Collapse;

            <tr>
                <td style="width: 5%" valign="top" align="center">
                    <span style="font-size: xx-small">
                        <nobr>@r.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</nobr>
                       
                        <input type="checkbox" @key="@rId" checked="@recs[rId].Metadata.Completed"
                               @onclick="async () => { recs[rId].Metadata.Completed = !recs[rId].Metadata.Completed; await UpdateRecord(recs[rId]); }"/>

                    </span>
                </td>
                <td style="width: 95%; vertical-align: top; @(r.Metadata.Completed ? "background-color: lightgrey;" : "")">
                    <div style="width: 100%; font-size: xx-small; color: grey;">
                        @foreach (var t in (r.Metadata?.Tags ?? new List<string>()))
                        {
                        <span><i style="cursor:pointer"
                                 @onclick="() => TagsToFilter = TagsToFilter.Concat(new[] { t }).Select(t => t.Trim()).Distinct().ToList()"
                                 ><u>@t</u></i>, </span>
                        }
                        | <span @key="@("cpt"+r.Id)" 
                                style="cursor: pointer; @(TagsCopiedFrom == r.Id ? "border: 1px solid; background-color: lightblue;" : "")" 
                                @onclick='() =>
                                          {
                                              Tags = string.Join(", ", (r.Metadata?.Tags ?? new()));
                                              TagsCopiedFrom = r.Id;
                                          }'>----</span>
                        | <span @key="@("filt"+r.Id)"
                                style="cursor: pointer; @(TagsFilterFrom == r.Id ? "border: 1px solid; background-color: green;" : "")"
                                    @onclick='() =>
                                          {
                                              TagsToFilter = (r.Metadata?.Tags ?? new()).Select(t => t.Trim()).Distinct().ToList(); 
                                              TagFilterAny = false;
                                              TagsFilterFrom = r.Id;
                                          }'>**</span>
                    </div>
                    <div style="width: 100%; text-overflow: ellipsis; word-wrap: break-word;">
                        <!--((MarkupString)CleanupAndPrepare(JsonSerializer.Serialize(r.Metadata, new JsonSerializerOptions() { WriteIndented = true })))-->
                        @if (!r.Metadata.Encrypted)
                        {
                            @((MarkupString)CleanupAndPrepare(r.Content, collapsed[r.Id]))
                            @if (r.Content.Length > userSettings.Collapse.Length)
                            {
                                <span>
                                    &nbsp;
                                    <span style="cursor:pointer;border: 1px solid black;"
                                          @key='("colapsedSwitch" + r.Id)'
                                          @onclick="() => collapsed[r.Id] = !collapsed[r.Id]">@(collapsed[r.Id] ? "...+" : "-...")</span>
                                </span>                            
                            }

                        }
                        else
                        {
                            <span>
                                <span style="@(dOpts[rId].showEncrypted ? "font-size: xx-small; color: DarkGrey" : dOpts[rId].decrypt ? "color: darkblue" : "font-style: italic; color: brown")">
                                    @((MarkupString)CleanupAndPrepare(Decrypt(dOpts[rId], r.Content), collapsed[r.Id]))
                                    @if (Decrypt(dOpts[rId], r.Content).Length > userSettings.Collapse.Length)
                                    {
                                    <span>
                                        &nbsp;
                                        <span style="cursor:pointer;border: 1px solid black;"
                                              @key='("colapsedSwitch" + r.Id)'
                                              @onclick="() => collapsed[r.Id] = !collapsed[r.Id]">@(collapsed[r.Id] ? "...+" : "-...")</span>
                                    </span>
                                    }
                                </span>
                                <br />
                                <span style="font-size: x-small">
                                    <input type="checkbox" id="@($"se{rId}")" checked="@dOpts[rId].showEncrypted"
                                           @onclick="() => { dOpts[rId].showEncrypted = !dOpts[rId].showEncrypted;}" />
                                    <label for="@($"se{rId}")">Show Encrypted</label>


                                    <input type="checkbox" id="@($"d{rId}")" checked="@dOpts[rId].decrypt"
                                           @onclick="() => { dOpts[rId].decrypt = !dOpts[rId].decrypt;}" />
                                    <label for="@($"d{rId}")">Decrypt</label>

                                    <input type="password" id="@($"k{rId}")" @bind-value="dOpts[rId].key" />
                                </span>
                            </span>

                        }
                    </div>
                </td>
            </tr>
        }
        <tr>
            <td colspan="2">
                <!--h:  @(HGHT)<hr/>-->
                <textarea id="NewRecordContent" style="width: 100%"
                          @bind="NewRecordContent"
                          @bind:event="oninput"
                          @onkeydown="(KeyboardEventArgs e) => AddRecordByEnter(e)"
                          @ref="NewRecordContentElem" />
                <span style="font-size:x-small">
                    <input type="checkbox" id="encrypt" checked="@EncryptContent" @onclick="() => EncryptContent = !EncryptContent" /> Encrypt
                    Key: <input type="password" id="enckey" @bind-value="EncryptionKey" />
                    | Tags (a,b,c): <input type="text" @bind-value="Tags" />

                </span>
                <button @onclick="AddRecord">Add</button>
            </td>
        </tr>
    </table>
}

@code {
    [Parameter]
    public string NbId { get; set; }
    protected Notebook notebook { get; set; }
    protected bool NbNotFound = false;
    protected int NumLastRecords { get; set; }
    protected bool ShowCompleted { get; set; }

    private string __n_r_c = "";
    private bool NewRecordContentChanged = false;
    protected string NewRecordContent {
        get
        {
            return __n_r_c;
        }
        set
        {
            __n_r_c = value;
            NewRecordContentChanged = true;
        }
    }
    protected string HGHT = "";
    private ElementReference NewRecordContentElem;

    private bool EncryptContent = false;
    private string EncryptionKey;

    protected Dictionary<string, ShowEncryptedOptions> dOpts = new Dictionary<string, ShowEncryptedOptions>();
    protected Dictionary<string, Record> recs = new Dictionary<string, Record>();
    protected Dictionary<string, bool> collapsed = new Dictionary<string, bool>();


    protected UserSettings userSettings;

    protected bool ShowTextRefreshed = false;
    protected List<string> TagsToFilter = new List<string>();
    protected bool TagFilterAny = true;

    protected string Tags { get; set; }
    private string TagsCopiedFrom = "";
    private string TagsFilterFrom = "";

    private string _tsv = "";
    protected string TagSelectedValue {
        get { return _tsv; }
        set {
            _tsv = value;
            if (!string.IsNullOrWhiteSpace(_tsv))
            {
                var t = _tsv;
                TagsToFilter = TagsToFilter.Concat(new[] { t }).Select(t => t.Trim()).Distinct().ToList();
                var timer = new System.Threading.Timer((_) =>
                {
                    InvokeAsync(() =>
                    {
                        TagSelectedValue = "";
                        StateHasChanged();
                    });
                }, null, 100, System.Threading.Timeout.Infinite);
            }
        }
    }
    private Timer resizeTimer;
    protected override async Task OnInitializedAsync()
    {
        await ReloadNotebook();
        userSettings = (await AppState.Retrieve<UserSettings>("UserSettings")) ?? new UserSettings();
        NumLastRecords = userSettings.DefaultRecordsToShow;
        ShowCompleted = userSettings.ShowCompleted;
        EncryptionKey = userSettings.DefaultShowEncryptedOptions.key;
        Tags = (await AppState.Retrieve<string>($"CurrentTagsForNb_{notebook?.Id ?? "na"}")) ?? "";
        resizeTimer = new Timer((_) =>
        {
            InvokeAsync(async () =>
            {
                await ResizeTextArea();
            });
        }, null, 1000, 300);
    }

    private async Task ResizeTextArea()
    {
        if (NewRecordContentChanged)
        {
            var res = await JsRuntime.InvokeAsync<object>("eval", @"(function() {
            if (NewRecordContent.scrollHeight < 300) {
                NewRecordContent.style.height='auto';
                NewRecordContent.style.height=(NewRecordContent.scrollHeight + 5)+'px';
            }
            return NewRecordContent.style.height;
                })()");
            HGHT = res.ToString();
            NewRecordContentChanged = false;
        }
    }

    protected bool MatchTags(Record r)
    {
        bool res = !TagsToFilter.Any() ||
                    (TagFilterAny && (r.Metadata?.Tags ?? new List<string>())
                            .Select(t => t.Trim())
                            .Intersect(TagsToFilter.Select(t => t.Trim())).Any()) ||
                    (!TagFilterAny && (r.Metadata?.Tags ?? new List<string>())
                            .Select(t => t.Trim())
                            .Intersect(TagsToFilter.Select(t => t.Trim())).Count() == TagsToFilter.Count());
        return res;
    }


    protected DateTimeOffset FilterDateFrom = DateTimeOffset.MinValue;
    protected DateTimeOffset FilterDateTo = DateTimeOffset.MaxValue;
    protected string FilterContent = null;//"encr";


    protected IEnumerable<Record> RecordsToShow(Notebook notebook)
    {
        var ret = (notebook?.Records ?? new List<Record>())
            // match date
            .Where(r => r.Timestamp >= FilterDateFrom && r.Timestamp <= FilterDateTo)
            // match content
            .Where(r => (string.IsNullOrWhiteSpace(FilterContent) || MatchesContent(r, FilterContent)))
            .Where(r => ShowCompleted || !r.Metadata.Completed);
        return ret;
    }
    private bool MatchesContent(Record r, string text)
    {
        if (string.IsNullOrWhiteSpace(text)) return true;
        if (r.Metadata.Encrypted)
        {
            var decrypted = Decrypt((dOpts.ContainsKey(r.Id) ? dOpts[r.Id] : userSettings.DefaultShowEncryptedOptions), r.Content);
            return decrypted.ToLower().Contains(FilterContent.ToLower());
        } else
        {
            return r.Content.ToLower().Contains(FilterContent.ToLower());
        }
    }

    protected string CleanupAndPrepare(string txt, bool collapsed)
    {
        var str = collapsed ? txt.Substring(0, Math.Min(userSettings.Collapse.Length, txt.Length)) : txt;
        var safeStr = str.Replace("<", "&lt;");
        var prepared = string.Join("<wbr/>", ChunksUpto(safeStr, 10));
        prepared = prepared.Replace("\r\n", "\n").Replace("\n", "<br/>");
        return prepared;
    }

    static IEnumerable<string> ChunksUpto(string str, int maxChunkSize)
    {
        for (int i = 0; i < str.Length; i += maxChunkSize)
            yield return str.Substring(i, Math.Min(maxChunkSize, str.Length - i));
    }

    protected string Decrypt(ShowEncryptedOptions dOpt, string text)
    {
        if (dOpt.showEncrypted) return text;
        if (!dOpt.decrypt || string.IsNullOrWhiteSpace(dOpt.key)) return "Encrypted Record";
        try
        {
            var decr = enc.DecryptFromB64(dOpt.key, text);
            return decr;
        }
        catch (WrongKeyException)
        {
            return "Cannot decrypt: wrong key";
        }
        catch (WrongEncryptedContentException)
        {
            return "Cannot decrypt: wrong format";
        }
        catch
        {
            return "Cannot decrypt: unknown reason";
        }
    }

    protected async Task ReloadNotebook()
    {
        try
        {
            notebook = await Http.GetFromJsonAsync<Notebook>($"api/notebook/{NbId}");
        }
        catch
        {
            NbNotFound = true;
        }
    }
    protected void ChangedNumLastRecords(string numS)
    {
        if (int.TryParse(numS, out int num))
        {
            NumLastRecords = num;
        }
    }
    protected async Task AddRecordByEnter(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && !(e.AltKey || e.ShiftKey || e.CtrlKey))
        {
            await AddRecord();
        }
    }
    protected async Task AddRecord()
    {
        if (string.IsNullOrWhiteSpace(NewRecordContent)) return;
        var rec = new Record();
        if (EncryptContent)
        {
            rec.Metadata.Encrypted = true;
            rec.Content = enc.EncryptAndReturnB64(EncryptionKey, NewRecordContent);
        }
        else
        {
            rec.Content = NewRecordContent;
        }
        if (!string.IsNullOrWhiteSpace(Tags))
        {
            rec.Metadata.Tags = Tags
                .Split(',')
                .Select(t => t.Trim())
                .ToList();
            await AppState.Store<string>($"CurrentTagsForNb_{notebook.Id}", string.Join(", ", rec.Metadata.Tags));
        }

        await Http.PostAsJsonAsync($"api/notebook/{NbId}/record", rec);
        NewRecordContent = "";
        await ReloadNotebook();
        await NewRecordContentElem.FocusAsync();
    }
    protected async Task RemoveRecord(string recId)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Delete Record?");
        if (!confirmed) return;

        await Http.DeleteAsync($"api/notebook/{NbId}/record/{recId}");
        await ReloadNotebook();
    }
    protected async Task UpdateRecord(Record rec)
    {
        var json = JsonSerializer.Serialize(rec);
        var content = new StringContent(json);
        content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
        await Http.PatchAsync($"api/notebook/{NbId}/record/{rec.Id}", content);
        await ReloadNotebook();
    }


}
