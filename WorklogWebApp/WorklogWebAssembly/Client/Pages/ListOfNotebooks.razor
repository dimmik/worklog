@page "/notebooks"
@using WorklogDomain
@using Algorithms
@inject HttpClient Http
@inject AppState State
@inject IJSRuntime JsRuntime

<h1>Notebook List</h1>



@if (notebooks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Created</th>
                <th>Cont recs</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var notebook in notebooks)
            {
                <tr>
                    <td><a href="/notebooks/@notebook.Id">@notebook.Name</a></td>
                    <td>@notebook.Created.ToString("dd.MM.yyyy HH:mm:ss")</td>
                    <td>@(notebook.Records?.Count() ?? 0)

                    <button @onclick="() => RemoveNotebook(notebook.Id)">Remove</button>
                    </td>


                 </tr>
            }
            <tr>
                <td colspan="3">

                    <EditForm Model="@newNotebook" OnValidSubmit="@AddNotebook">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        Name: <InputText id="name" @bind-Value="newNotebook.Name" />
                        @if (auth.IsAdmin) 
                        { 
                            <span>Namespace: <InputText id="namespace" @bind-Value="newNotebook.NamespaceMd5" /></span>
                        }

                        <button type="submit">Add</button>
                    </EditForm>

                </td>
            </tr>
        </tbody>
    </table>
}

@code {
    private Notebook[] notebooks;
    private Notebook newNotebook = new();

    protected AuthData auth { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ReloadNotebooks();
        auth = await State.Retrieve<AuthData>("authData");
    }
    protected async Task ReloadNotebooks()
    {
        notebooks = await Http.GetFromJsonAsync<Notebook[]>("api/notebook");
    }
    protected async Task AddNotebook()
    {
        Notebook clone = new();
        clone.NamespaceMd5 = newNotebook.NamespaceMd5.CreateMD5();
        clone.Name = newNotebook.Name;
        await Http.PostAsJsonAsync<Notebook>("api/notebook", clone);
        newNotebook = new();
        await ReloadNotebooks();
    }
    protected async Task RemoveNotebook(string id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Delete Notebook?");
        if (!confirmed) return;
        await Http.DeleteAsync($"api/notebook/{id}");
        await ReloadNotebooks();
    }
}
